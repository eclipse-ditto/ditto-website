{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "description": "A policy enables developers to configure fine-grained access control for Things.",
  "title": "Policy",
  "properties": {
    "policyId": {
      "type": "string",
      "description": "Unique identifier representing the policy, has to conform to the namespaced entity ID notation (see [Ditto documentation on namespaced entity IDs](https://www.eclipse.dev/ditto/basic-namespaces-and-names.html#namespaced-id)).\n\nExamples for a valid policy ID:\n * `org.eclipse.ditto:xdk_policy_53`\n * `foo:xdk_53`\n * `org.eclipse.vorto_42:xdk_policy`"
    },
    "imports": {
      "title": "PolicyImports",
      "type": "object",
      "description": "Policy imports containing one policy import for each key. The key is the policy ID of the referenced policy.",
      "properties": {
        "additionalProperties": {
          "title": "PolicyImport",
          "type": "object",
          "description": "Single policy import defining which policy entries of the referenced policy are imported.",
          "properties": {
            "entries" : {
              "title": "ImportedEntries",
              "type": "array",
              "description": "The policy entries to import from the referenced policy identified by their labels. In case the field is omitted or an empty array is provided, all policy entries defined as implicit (\"importable\": \"implicit\") are imported.",
              "items": {
                "type": "string",
                "description": "Label of a policy entry to import from the referenced policy."
              },
              "maxItems": 10
            }
          }
        }
      }
    },
    "entries": {
      "title": "PolicyEntries",
      "type": "object",
      "description": "PolicyEntries containing one PolicyEntry for each arbitrary `label` key.",
      "properties": {
        "additionalProperties": {
          "title": "Label",
          "type": "object",
          "description": "Single policy entry containing Subjects and Resources.",
          "properties": {
            "subjects": {
              "title": "Subjects",
              "type": "object",
              "description": "Subjects defining who is addressed.",
              "additionalProperties": {
                "title": "SubjectEntry",
                "type": "object",
                "description": "Single (Authorization) Subject entry holding its type. The key is the actual subject identifier.",
                "properties": {
                  "type": {
                    "type": "string",
                    "title": "SubjectType",
                    "description": "The type of the (Authorization) Subject. This string can take an arbitrary value and is intended for documentational purposes, e.g. in order to document when it was created or with which purpose."
                  },
                  "expiry": {
                    "type": "string",
                    "description": "The optional expiry timestamp (formatted in ISO-8601) indicates how long this subject should be considered before it is automatically deleted from the policy.",
                    "format": "date-time"
                  },
                  "announcement": {
                    "title": "Announcement",
                    "type": "object",
                    "description": "The configuration of announcements to send for this Subject.",
                    "properties": {
                      "beforeExpiry": {
                        "title": "Before expiry",
                        "type": "string",
                        "description": "The duration before expiry when an announcement should be sent.",
                        "example": "100s"
                      },
                      "whenDeleted": {
                        "title": "When deleted",
                        "type": "boolean",
                        "description": "Whether an announcement should be sent upon subject deletion."
                      },
                      "requestedAcks": {
                        "title": "Requested Acks",
                        "type": "object",
                        "description": "Settings to enable at-least-once delivery for policy announcements.",
                        "properties": {
                          "labels": {
                            "type": "array",
                            "description": "Acknowledgement labels to request when an announcement is published.",
                            "items": {
                              "type": "string"
                            },
                            "example": ["my-connection:my-issued-acknowledgement"]
                          },
                          "timeout": {
                            "type": "string",
                            "description": "How long to wait for requested announcements before retrying publication of an announcement.",
                            "example": "60s"
                          }
                        }
                      },
                      "randomizationInterval": {
                        "title": "Randomization interval",
                        "type": "string",
                        "description": "The interval in which the announcement can be sent earlier in effort to prevent announcement peaks.",
                        "example": "60s"
                      }
                    }
                  }
                },
                "required": [
                  "type"
                ]
              }
            },
            "resources": {
              "title": "Resources",
              "type": "object",
              "description": "Resources containing one or many ResourceEntries.",
              "additionalProperties": {
                "title": "ResourceEntry",
                "type": "object",
                "description": "Single Resource entry defining permissions per effect. The keys must be in the format `type:path` with `type` being one of the following `thing`, `policy` or `message` resources. See [policy documentation](../basic-policy.html#which-resources-can-be-controlled) for detailed information.",
                "properties": {
                  "grant": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "All subjects specified in this policy entry are granted read/write permission on the resources specified in the path, and all subsequent paths, except they are revoked at a subsequent policy label.",
                      "enum": [
                        "READ",
                        "WRITE"
                      ]
                    }
                  },
                  "revoke": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "All subjects specified in this policy entry are prohibited to read/write on the resources specified in the path, and all subsequent paths, except they are granted again such permission at a subsequent policy label.",
                      "enum": [
                        "READ",
                        "WRITE"
                      ]
                    }
                  }
                },
                "required": [
                  "grant",
                  "revoke"
                ]
              }
            },
            "importable": {
              "title": "Importable type",
              "type": "string",
              "description": "Controls the import behavior of this policy entry i.e. whether this policy entry is implicitly, explicitly or never imported when referenced from another policy. (`implicit` (default): the policy entry is imported without being listed in the importing policy individually, `explicit`: the policy entry is only imported if it is listed in the importing policy, `never`: the policy entry is not imported, regardless of being listed in the importing policy. If the field is not specified, default value is `implicit`.",
              "enum": ["implicit", "explicit", "never"],
              "default": "implicit"
            }
          },
          "required": [
            "subjects",
            "resources"
          ]
        }
      }
    },
    "_revision": {
      "type": "integer",
      "description": "_(read-only)_ The revision is a counter which is incremented on each modification of a policy."
    },
    "_created": {
      "type": "string",
      "description": "_(read-only)_ The created timestamp of the policy in ISO-8601 UTC format. The timestamp is set on creation of a policy.",
      "format": "date-time"
    },
    "_modified": {
      "type": "string",
      "description": "_(read-only)_ The modified timestamp of the policy in ISO-8601 UTC format. The timestamp is set on each modification of a policy.",
      "format": "date-time"
    },
    "_metadata": {
      "type": "object",
      "description": "_(read-only)_ The metadata of the policy. This field is not returned by default but must be selected explicitly. The content is a JSON object having the policy's JSON structure with the difference that the JSON leaves of the policy are JSON objects containing the metadata."
    }
  },
  "required": [
    "policyId",
    "entries"
  ]
}
