<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Eclipse Ditto Blog</title>
        <description>Announcements, tutorials and examples around Eclipse Ditto and Digital Twins</description>
        <link>https://www.eclipse.org/ditto/</link>
        <atom:link href="https://www.eclipse.org/ditto/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Mon, 01 Apr 2019 03:47:43 -0400</pubDate>
        <lastBuildDate>Mon, 01 Apr 2019 03:47:43 -0400</lastBuildDate>
        <generator>Jekyll v3.6.2</generator>
        
        <item>
            <title>Announcing Ditto Milestone 0.9.0-M1</title>
            <description>&lt;p&gt;Today the Ditto team is happy to announce the first milestone of the upcoming release 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.9.0&quot;&gt;0.9.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;release_notes_090-M1.html&quot;&gt;0.9.0-M1 release notes&lt;/a&gt; for what changed in detail.&lt;/p&gt;

&lt;p&gt;The main changes and new features since the last release &lt;a href=&quot;release_notes_080.html&quot;&gt;0.8.0&lt;/a&gt; are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;memory optimizations when working with millions of digital twins&lt;/li&gt;
  &lt;li&gt;enhance connectivity to also be able to establish connections to Apache Kafka&lt;/li&gt;
  &lt;li&gt;providing more detailed metrics for connections&lt;/li&gt;
  &lt;li&gt;cluster bootstrapping stability improvements&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Thu, 28 Mar 2019 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2019-03-28-milestone-announcement-090-M1.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2019-03-28-milestone-announcement-090-M1.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Connectivity to Apache Kafka in Eclipse Ditto</title>
            <description>&lt;p&gt;Today we added connectivity to &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;Apache Kafka&lt;/a&gt;. In a first step, it is possible to publish
&lt;em&gt;twin events&lt;/em&gt;, &lt;em&gt;messages&lt;/em&gt;, &lt;em&gt;live commands and events&lt;/em&gt; to Kafka topics.&lt;/p&gt;

&lt;p&gt;Since the last addition to Ditto’s connectivity which &lt;a href=&quot;2018-10-16-example-mqtt-bidirectional.html&quot;&gt;added MQTT connectivity&lt;/a&gt;,
the connectivity feature got a lot of stabilization and new smaller features, e.g. the recent addition of 
&lt;a href=&quot;basic-placeholders.html#function-expressions&quot;&gt;placeholder functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Returning to the Kafka integration Ditto can now, for example, whenever a &lt;a href=&quot;intro-digitaltwins.html&quot;&gt;Digital Twin&lt;/a&gt; is 
changed (e.g. a device updated some state data), publish a &lt;em&gt;twin event&lt;/em&gt; to a Kafka topic.&lt;/p&gt;

&lt;p&gt;If you already rely on Apache Kafka as a source for your data lake or analytics, integrating Ditto and its Digital Twins
is now super easy.&lt;/p&gt;

&lt;p&gt;Find out more at our &lt;a href=&quot;connectivity-protocol-bindings-kafka2.html&quot;&gt;Kafka documentation&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Wed, 13 Mar 2019 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2019-03-13-kafka-connectivity.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2019-03-13-kafka-connectivity.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Using Eclipse Hono's Command&amp;Control with Eclipse Ditto</title>
            <description>&lt;p&gt;With &lt;a href=&quot;release_notes_080.html&quot;&gt;version 0.8.0&lt;/a&gt; Eclipse Ditto can now interact with Eclipse Hono using the 
&lt;a href=&quot;https://www.eclipse.org/hono/concepts/command-and-control&quot;&gt;Command &amp;amp; Control&lt;/a&gt; feature. It is possible to send a 
Thing (or Feature) message at the Ditto Message API, which is then forwarded to Hono as a 
command message. Hono routes the message to the device, which in turn can send a response to the command including a 
status, telling if the command was successfully processed or not. 
This response is routed back via Hono to the Ditto Message API.&lt;/p&gt;

&lt;p&gt;In this example we connect the &lt;a href=&quot;https://ditto.eclipse.org/&quot;&gt;Ditto sandbox&lt;/a&gt; and the 
&lt;a href=&quot;https://www.eclipse.org/hono/sandbox/&quot;&gt;Hono sandbox&lt;/a&gt; to send a message (3) to a simulated device via the 
Ditto Messages API. The device receives the command from the Hono HTTP Adapter and responds with a message (4) 
that is routed back to the caller at the Ditto Message API (5). For the sake of simplicity we use simple curl 
commands both for the Ditto and Hono HTTP APIs.&lt;/p&gt;

&lt;p&gt;The following steps are covered in this example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup a connection between Eclipse Ditto and Hono sandboxes&lt;/li&gt;
  &lt;li&gt;Signal availability of the device&lt;/li&gt;
  &lt;li&gt;Send a Ditto message&lt;/li&gt;
  &lt;li&gt;Device receives command and sends command response&lt;/li&gt;
  &lt;li&gt;Caller receives response at Ditto Message API&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;images/blog/2018-12-14-command-and-control.png&quot; alt=&quot;Command and Control&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;prerequisites-a-ditto-digital-twin-and-a-hono-device&quot;&gt;Prerequisites: A Ditto digital twin and a Hono device&lt;/h3&gt;

&lt;p&gt;The creation of a Hono device and Ditto digital twin has already been covered in the blog post 
&lt;a href=&quot;2018-05-02-connecting-ditto-hono.html&quot;&gt;Connecting Eclipse Ditto to Eclipse Hono&lt;/a&gt;. For brevity we will just list the 
required commands to create a twin/device here. For a detailed explanation of the steps please refer to the previous 
post.&lt;/p&gt;

&lt;h4 id=&quot;create-hono-device&quot;&gt;Create Hono device&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# setup a tenant&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;tenant-id&quot;: &quot;org.eclipse.ditto&quot;}'&lt;/span&gt; http://hono.eclipse.org:28080/tenant
&lt;span class=&quot;c&quot;&gt;# create a device&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;device-id&quot;: &quot;org.eclipse.ditto:teapot&quot;}'&lt;/span&gt; http://hono.eclipse.org:28080/registration/org.eclipse.ditto
&lt;span class=&quot;c&quot;&gt;# add device credentials&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ PWD_HASH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'teapot'&lt;/span&gt; | openssl dgst &lt;span class=&quot;nt&quot;&gt;-binary&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sha512&lt;/span&gt; | base64 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; 0&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
  &quot;device-id&quot;: &quot;org.eclipse.ditto:teapot&quot;,
  &quot;type&quot;: &quot;hashed-password&quot;,
  &quot;auth-id&quot;: &quot;teapot&quot;,
  &quot;secrets&quot;: [{
      &quot;hash-function&quot; : &quot;sha-512&quot;,
      &quot;pwd-hash&quot;: &quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD_HASH&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;
  }]
}'&lt;/span&gt; http://hono.eclipse.org:28080/credentials/org.eclipse.ditto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-ditto-digital-twin&quot;&gt;Create Ditto digital twin&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create thing in Ditto&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo5:demo &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
    &quot;features&quot;: {
      &quot;water&quot;: {
        &quot;properties&quot;: {
          &quot;temperature&quot;: 20
        }
      }
    }
}'&lt;/span&gt; https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:teapot 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-a-connection-for-command--control&quot;&gt;Setup a connection for Command &amp;amp; Control&lt;/h3&gt;
&lt;p&gt;In order to forward Ditto Messages to the device as a Hono command we first need to setup and configure a 
&lt;a href=&quot;connectivity-manage-connections.html&quot;&gt;connection&lt;/a&gt; between Eclipse Ditto and Eclipse Hono that is prepared for 
&lt;em&gt;Command &amp;amp; Control&lt;/em&gt; messages. According to the 
&lt;a href=&quot;https://www.eclipse.org/hono/concepts/command-and-control&quot;&gt;Hono documentation&lt;/a&gt; 
the connection must contain a target with the address &lt;code class=&quot;highlighter-rouge&quot;&gt;control/&amp;lt;tenant-id&amp;gt;/&amp;lt;device-id&amp;gt;&lt;/code&gt; 
and a source with the address &lt;code class=&quot;highlighter-rouge&quot;&gt;control/&amp;lt;tenant-id&amp;gt;/&amp;lt;reply-identifier&amp;gt;&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;reply-identifier&lt;/code&gt; can be 
chosen arbitrarily, but must be set as the &lt;code class=&quot;highlighter-rouge&quot;&gt;reply-to&lt;/code&gt; header of a command exactly as defined in the connection:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; devops:devopsPw1! &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
           &quot;targetActorSelection&quot;: &quot;/system/sharding/connection&quot;,
           &quot;headers&quot;: {
             &quot;aggregate&quot;: false
           },
           &quot;piggybackCommand&quot;: {
             &quot;type&quot;: &quot;connectivity.commands:createConnection&quot;,
             &quot;connection&quot;: {
               &quot;id&quot;: &quot;command-and-control-connection&quot;,
               &quot;connectionType&quot;: &quot;amqp-10&quot;,
               &quot;connectionStatus&quot;: &quot;open&quot;,
               &quot;uri&quot;: &quot;amqp://consumer%40HONO:verysecret@hono.eclipse.org:15672&quot;,
               &quot;failoverEnabled&quot;: true,
               &quot;sources&quot;: [{
                   &quot;addresses&quot;: [
                     &quot;control/org.eclipse.ditto/replies&quot;
                   ],
                   &quot;authorizationContext&quot;: [
                     &quot;nginx:demo5&quot;
                   ],
                   &quot;headerMapping&quot;: {
                     &quot;correlation-id&quot;: &quot;{{ header:correlation-id }}&quot;,
                     &quot;status&quot;: &quot;{{ header:status }}&quot;,
                     &quot;content-type&quot;: &quot;{{ header:content-type }}&quot;
                   }
                 },
                 {
                   &quot;addresses&quot;: [&quot;telemetry/org.eclipse.ditto&quot;, &quot;event/org.eclipse.ditto&quot;],
                   &quot;authorizationContext&quot;: [&quot;nginx:demo5&quot;]
                 }
               ],
               &quot;targets&quot;: [{
                   &quot;address&quot;: &quot;control/org.eclipse.ditto/{{ thing:id }}&quot;,
                   &quot;authorizationContext&quot;: [
                     &quot;nginx:demo5&quot;
                   ],
                   &quot;topics&quot;:[&quot;_/_/things/live/messages&quot;],
                   &quot;headerMapping&quot;: {
                     &quot;message-id&quot;: &quot;{{ header:correlation-id }}&quot;,
                     &quot;subject&quot;: &quot;{{ topic:subject }}&quot;,
                     &quot;content-type&quot;: &quot;application/vnd.eclipse.ditto+json&quot;,
                     &quot;reply-to&quot;: &quot;control/org.eclipse.ditto/replies&quot;
                   }
                 }
               ]
             }
           }
         }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://ditto.eclipse.org/devops/piggyback/connectivity?timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As described in the 
&lt;a href=&quot;https://www.eclipse.org/hono/api/command-and-control-api/#send-a-request-response-command&quot;&gt;Hono API description&lt;/a&gt; 
a command message has three mandatory properties: &lt;code class=&quot;highlighter-rouge&quot;&gt;correlation-id&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;subject&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reply-to&lt;/code&gt;, these are defined in the 
target header mapping of the connection. 
The source header mapping defines a mapping for &lt;code class=&quot;highlighter-rouge&quot;&gt;correlation-id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; to internal headers, they are required 
to properly map the Hono command response to a Ditto message response.&lt;/p&gt;

&lt;h3 id=&quot;signal-availability-of-device&quot;&gt;Signal availability of device&lt;/h3&gt;

&lt;p&gt;As we are using the Hono HTTP Adapter to connect our device, send telemetry and receive commands, the designated way 
is therefor to signal readiness to receive a command by specifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-ttd&lt;/code&gt; parameter on an arbitrary event (for 
detailed description please consult the 
[Hono HTTP Adapter] (https://www.eclipse.org/hono/user-guide/http-adapter/#specifying-the-time-a-device-will-wait-for-a-response) 
guide).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; teapot@org.eclipse.ditto:teapot &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hono-ttd: 60'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
           &quot;topic&quot;: &quot;org.eclipse.ditto/teapot/things/twin/commands/modify&quot;,
           &quot;path&quot;: &quot;/features/water/properties/temperature&quot;,
           &quot;value&quot;: 23
         }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     http://hono.eclipse.org:8080/telemetry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The request is now open to receive a command for 60 seconds before it is terminated.&lt;/p&gt;

&lt;h3 id=&quot;send-a-ditto-message&quot;&gt;Send a Ditto message&lt;/h3&gt;

&lt;p&gt;Now we can use the &lt;a href=&quot;protocol-specification-things-messages.html#using-the-messages-api&quot;&gt;Ditto Messages API&lt;/a&gt; to send a 
message to the device waiting for a command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;s1&quot;&gt;'https://ditto.eclipse.org/api/2/things/org.eclipse.ditto:teapot/inbox/messages/brew?timeout=60'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; demo5:demo &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'x-correlation-id: command-and-control'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;targetTemperature&quot;:85}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;device-receives-the-command&quot;&gt;Device receives the command&lt;/h3&gt;

&lt;p&gt;The message is forwarded to Hono as configured in the connection and finally terminates the pending request we opened 
before with a status code of &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
hono-command: brew
hono-cmd-req-id: 013command-and-controlreplies
Content-Type: application/octet-stream
Content-Length: 17
Connection: Keep-Alive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hono adds two headers besides the standard HTTP headers: &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-command&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-cmd-req-id&lt;/code&gt;. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;hono-command&lt;/code&gt; contains the subject of the message and &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-cmd-req-id&lt;/code&gt; identifies the messages and is used to 
correlate the request and the response we are now going to send.&lt;/p&gt;

&lt;h3 id=&quot;device-sends-a-command-response&quot;&gt;Device sends a command response&lt;/h3&gt;

&lt;p&gt;We use the header value of &lt;code class=&quot;highlighter-rouge&quot;&gt;hono-cmd-req-id&lt;/code&gt; to construct the response address: 
&lt;code class=&quot;highlighter-rouge&quot;&gt;http://hono.eclipse.org:8080/control/res/013command-and-controlreplies&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Another curl command completes the roundtrip with a response from the simulated device:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; teapot@org.eclipse.ditto:teapot &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hono-cmd-status: 200'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
           &quot;topic&quot;: &quot;org.eclipse.ditto/teapot/things/live/messages/brew&quot;,
           &quot;headers&quot;: {
             &quot;content-type&quot;: &quot;application/json&quot;,
             &quot;correlation-id&quot;: &quot;command-and-control&quot;
           },
           &quot;path&quot;: &quot;/inbox/messages/brew&quot;,
           &quot;value&quot;: { &quot;eta&quot;: 56},
           &quot;status&quot;: 200
         }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     http://hono.eclipse.org:8080/control/res/013command-and-controlreplies
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;message-response-is-received-at-ditto-message-api&quot;&gt;Message response is received at Ditto Message API&lt;/h3&gt;
&lt;p&gt;And finally we receive the command response at the Ditto Message API where we sent the original message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HTTP/1.1 200 OK
correlation-id: command-and-control
message-id: command-and-control
status: 200
Content-Type: application/json
Content-Length: 10

{&quot;eta&quot;:56}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;alternative-receive-command-and-send-response-via-mqtt&quot;&gt;Alternative: Receive command and send response via MQTT&lt;/h3&gt;

&lt;p&gt;Alternatively we can also receive the command by subscribing to the MQTT topic &lt;code class=&quot;highlighter-rouge&quot;&gt;control/+/+/req/#&lt;/code&gt; at the 
&lt;a href=&quot;https://www.eclipse.org/hono/user-guide/mqtt-adapter/#command-control&quot;&gt;Hono MQTT Adapter&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mosquitto_sub &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; hono.eclipse.org &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8883 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'teapot@org.eclipse.ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; teapot &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'control/+/+/req/#'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And also publish the command response on the MQTT topic &lt;code class=&quot;highlighter-rouge&quot;&gt;control///res/013command-and-controlreplies/200&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mosquitto_pub &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; hono.eclipse.org &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 8883 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'teapot@org.eclipse.ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; teapot &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; control///res/013command-and-controlreplies/200 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{
                    &quot;topic&quot;: &quot;org.eclipse.ditto/teapot/things/live/messages/brew&quot;,
                    &quot;headers&quot;: {
                      &quot;content-type&quot;: &quot;application/json&quot;,
                      &quot;correlation-id&quot;: &quot;command-and-control&quot;
                    },
                    &quot;path&quot;: &quot;/inbox/messages/brew&quot;,
                    &quot;value&quot;: {
                      &quot;eta&quot;: 58
                    },
                    &quot;status&quot;: 200
                  }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have any wishes, improvements, are missing something
or just want to get in touch with us, you can use one of
our &lt;a href=&quot;feedback.html&quot;&gt;feedback channels&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Wed, 05 Dec 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-12-05-example-command-and-control.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-12-05-example-command-and-control.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Eclipse Ditto Release 0.8.0</title>
            <description>&lt;p&gt;Today the Eclipse Ditto team proudly presents its first release 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.8.0&quot;&gt;0.8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;release_notes_080.html&quot;&gt;0.8.0 release notes&lt;/a&gt; for a more detailled information on the release.&lt;/p&gt;

&lt;p&gt;The main changes and new features since the latest milestone &lt;a href=&quot;release_notes_080-M3.html&quot;&gt;0.8.0-M3&lt;/a&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support Eclipse Hono’s command&amp;amp;control in Ditto connectivity&lt;/li&gt;
  &lt;li&gt;several smaller bugfixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Wed, 28 Nov 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-11-28-release-announcement-080.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-11-28-release-announcement-080.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.8.0-M3</title>
            <description>&lt;p&gt;Preparing the upcoming first release &lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.8.0&quot;&gt;0.8.0&lt;/a&gt; of 
Eclipse Ditto,  this milestone is a last checkpoint to ensure that the release will be performed smoothly.&lt;br /&gt;
Therefore, this milestone release primarily focuses on stabilization.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;release_notes_080-M3.html&quot;&gt;0.8.0-M3 release notes&lt;/a&gt; for what changed in detail.&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; If you want to upgrade an existing Ditto installation, you’ll have to execute a small 
        database migration - see release notes.&lt;/div&gt;

&lt;p&gt;The main changes and new features are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;speed up of search index creation&lt;/li&gt;
  &lt;li&gt;applying enforcement of messages received via connections (e.g. from Eclipse Hono)&lt;/li&gt;
  &lt;li&gt;copying already existing policies when creating things&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Wed, 14 Nov 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-11-14-milestone-announcement-080-M3.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-11-14-milestone-announcement-080-M3.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Example demonstrating connectivity to an MQTT broker</title>
            <description>&lt;p&gt;Eclipse Ditto can now connect to MQTT 3.1.1 brokers.&lt;/p&gt;

&lt;p&gt;Perfect timing to happily welcome a new colleague to our team behind Eclipse Ditto: &lt;a href=&quot;https://github.com/joosdavid&quot;&gt;David&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In order to get familiar with Ditto and the development with digital twins, David was assigned with one of his first 
tasks to get his hands on one of our newest features, &lt;a href=&quot;connectivity-protocol-bindings-mqtt.html&quot;&gt;MQTT connectivity&lt;/a&gt; 
which was released recently with milestone &lt;a href=&quot;2018-09-27-milestone-announcement-080-M2.html&quot;&gt;0.8.0-M2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On his journey into digital twin land he made a great example with an ESP8266 powered board connected via an MQTT broker
to Ditto and published it to the 
&lt;a href=&quot;https://github.com/eclipse/ditto-examples/tree/master/mqtt-bidirectional&quot;&gt;Eclipse Ditto examples repository&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This example is about how to communicate between device and solution in a two way pattern through Ditto using MQTT. 
  This means we will add a policy, a thing and a MQTT connection to Ditto. 
  When Ditto ist set up and working, we will create real world device (“octopus board”) and connect it to it’s 
  digital twin via MQTT.
  &lt;br /&gt;&lt;br /&gt;
  At the end, we will create a basic frontend webapp. 
  The webapp will automatically connect to Ditto when you type in your credentials, automatically pull your things 
  and show them in a list.
  &lt;br /&gt;
  You can create, modify and delete devices in the webapp and if there is a real world device connected to the thing 
  in the list, you can send it a command message to control any feature on it. 
  The list of things will always be up-to-date when you listen to server-sent-events, which you can activate easily 
  with pressing a button.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;https://raw.githubusercontent.com/eclipse/ditto-examples/master/mqtt-bidirectional/img/diagram.jpg&quot; alt=&quot;Eclipse Ditto bidirectional MQTT diagram&quot; style=&quot;max-width: 800px&quot; /&gt;&lt;figcaption&gt;Source: https://github.com/eclipse/ditto-examples&lt;/figcaption&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;We will use an Octopus-board with an ESP8266 on it. It has several sensors built in, but for simplicity we will
 just use it’s temperature and altitude sensor. 
 &lt;br /&gt;
 To show the functionality of Eclipse Ditto messages, we will switch on/off a LED on the Octopus-board through it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have any wishes, improvements, are missing something
or just want to get in touch with us, you can use one of
our &lt;a href=&quot;https://eclipse.org/ditto/feedback.html&quot;&gt;feedback channels&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Tue, 16 Oct 2018 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2018-10-16-example-mqtt-bidirectional.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-10-16-example-mqtt-bidirectional.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.8.0-M2</title>
            <description>&lt;p&gt;Brace yourself, Eclipse Ditto is preparing for its 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.8.0&quot;&gt;first release 0.8.0&lt;/a&gt;. We are happy to announce our next
milestone towards that goal.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;release_notes_080-M2.html&quot;&gt;0.8.0-M2 release notes&lt;/a&gt; for what changed in detail.&lt;/p&gt;

&lt;p&gt;The main changes and new features are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;enforcement of max. entity size of twins and messages&lt;/li&gt;
  &lt;li&gt;added MQTT support connecting to MQTT 3.1.1 brokers&lt;/li&gt;
  &lt;li&gt;subscribing to changes based on filters&lt;/li&gt;
  &lt;li&gt;conditional requests at all APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;Unfortunately, we had some problems during the milestone release build causing that the released artifacts have version
&lt;code class=&quot;highlighter-rouge&quot;&gt;0.8.0-M2b&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;0.8.0-M2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Thu, 27 Sep 2018 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2018-09-27-milestone-announcement-080-M2.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-09-27-milestone-announcement-080-M2.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Selective push notifications available</title>
            <description>&lt;p&gt;The &lt;a href=&quot;architecture-services-connectivity.html&quot;&gt;connectivity service&lt;/a&gt; supercharged Ditto’s flexibility in integrating with other services.
It’s such a great feature to let the other connected services know about thing updates and property changes.
Even the direct exchange with real-world assets became more flexible through the multi-protocol support.
But with a steady increase in connected devices, those messages easily sum up to a huge number.&lt;/p&gt;

&lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-info-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Note:&lt;/b&gt; In order to simplify a little, we here use the term &lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt; as synonym for both Ditto 
        &lt;a href=&quot;basic-signals.html&quot;&gt;signals&lt;/a&gt; and &lt;a href=&quot;basic-messages.html&quot;&gt;messages&lt;/a&gt;.&lt;/div&gt;

&lt;p&gt;Also, not every consuming application needs to know everything that’s going on.
In fact, the only use case that requires processing of every message is logging.
Therefore most of the times an application waits for a specific message to trigger a specific action.
So all other messages are discarded unused.
This adds a lot of unnecessary overhead both to the message transport capabilities and the processing of messages at the receiving end.&lt;/p&gt;

&lt;p&gt;But what if you could avoid receiving those messages at all.&lt;br /&gt;
Well, you can!&lt;br /&gt;
This is exactly what selective push notifications do: 
Configurable message filters that are applied to Ditto’s publishing connection before anything goes on the line. 
They can help you with a lot of problems in a bunch of scenarios:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bandwidth limitations: The amount of occurring events is too large and/or frequent to be delivered via the available channels. With selective message filters, you can mute the noise in your event stream.&lt;/li&gt;
  &lt;li&gt;Information hiding: Let consuming services only know what they need to know. Message filters allow you to control all published content in great detail.&lt;/li&gt;
  &lt;li&gt;Specialized notifications: A specific event filter can be used to set a value thresholds or a status-change trigger. This removes the burden of implementing filter logic on the application side.&lt;/li&gt;
  &lt;li&gt;Event routing: Create multiple connections with Ditto’s connectivity service and route your events through those aligned with your requirements. All by specifying appropriate filters for your connection targets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram visualizes this context:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/blog/2018-09-21-selective-push-notifications-visual-comparison.png&quot; alt=&quot;visual comparison&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the upcoming Ditto release &lt;code class=&quot;highlighter-rouge&quot;&gt;0.8.0-M2&lt;/code&gt;, those filters are available for the following endpoints:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WebSocket&lt;/li&gt;
  &lt;li&gt;Server-Sent Events (SSE)&lt;/li&gt;
  &lt;li&gt;All supported connectivity protocols (AMQP 0.9.1, AMQP 1.0 / &lt;a href=&quot;https://eclipse.org/hono/&quot;&gt;Eclipse Hono&lt;/a&gt;, MQTT)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use a basic namespace filter on the following topics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Twin events&lt;/li&gt;
  &lt;li&gt;Live events&lt;/li&gt;
  &lt;li&gt;Live messages&lt;/li&gt;
  &lt;li&gt;Live commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This filter is a comma-separated list of selected namespaces. It only allows messages related to one of the given namespaces.&lt;/p&gt;

&lt;p&gt;Furthermore, there is an additional &lt;a href=&quot;basic-rql.html&quot;&gt;RQL filter&lt;/a&gt; for an advanced description of twin and live events.
Powered by the mighty syntax of Ditto’s search API it allows configuring the selected events in the same manner as you search for things.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;basic-changenotifications.html#filtering&quot;&gt;documentation&lt;/a&gt; for more information on options and configuration.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-example&quot;&gt;A simple example&lt;/h2&gt;

&lt;p&gt;Imagine you have a flat with multiple environmental sensors: Some measure temperature, some humidity and some both.
This information can be useful for different applications.
In our case, a smart thermostat uses the sensor data to control the indoor climate and there is also a fire alarm installed that detects fires by abnormal high measured temperatures&lt;/p&gt;

&lt;p&gt;The following figure displays this setting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/blog/2018-09-21-selective-push-notifications-example-setup.png&quot; alt=&quot;example setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let’s start with the prerequisites. You need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A running Ditto instance with a valid user (You can follow our &lt;a href=&quot;intro-hello-world.html&quot;&gt;Hello World example&lt;/a&gt; to create one). This example uses dittos default user on a locally running instance.&lt;/li&gt;
  &lt;li&gt;A tool for executing HTTP requests (e.g. Ditto’s Swagger API, cURL, Postman). We use this to create our twins and simulate the sensors.&lt;/li&gt;
  &lt;li&gt;A modern browser supporting WebSockets. This example uses &lt;a href=&quot;https://websocket.org/echo.html&quot;&gt;websocket.org&lt;/a&gt; as a websocket client. The site will tell you if your browser supports the WebSocket protocol. We will mock our applications this way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-digital-twins&quot;&gt;The digital twins&lt;/h3&gt;

&lt;p&gt;First we configure our sensors digital twins:&lt;/p&gt;

&lt;p&gt;A temperature sensor&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{
       &quot;features&quot;: {
         &quot;environmentSensor&quot;: {
           &quot;properties&quot;: { 
             &quot;temperature&quot;: 0.0
           }
         }
       }
     }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureSensor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A humidity sensor&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{
       &quot;features&quot;: {
         &quot;environmentSensor&quot;: {
           &quot;properties&quot;: { 
             &quot;humidity&quot;: 0
           }
         }
       }
     }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3AHumiditySensor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A combined temperature and humidity sensor&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{
       &quot;features&quot;: {
         &quot;environmentSensor&quot;: {
           &quot;properties&quot;: {
             &quot;temperature&quot;: 0.0,
             &quot;humidity&quot;: 0
           }
         }
       }
     }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureAndHumiditySensor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, a teapot&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{}'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATeapot'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mocking-the-consuming-applications&quot;&gt;Mocking the consuming applications&lt;/h3&gt;

&lt;p&gt;Open your browser on https://websocket.org/echo.html. 
This site allows you to connect with any WebSocket endpoint and supports simple sending and receiving of messages. The interface is shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/blog/2018-09-21-selective-push-notifications-websocket_org.png&quot; alt=&quot;websocket.org site&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter Ditto’s WebSocket endpoint with user credentials &lt;code class=&quot;highlighter-rouge&quot;&gt;ws://ditto:ditto@localhost:8080/ws/2&lt;/code&gt; and hit the &lt;em&gt;Connect&lt;/em&gt; button.
The log output should confirm the action by printing a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;CONNECTED&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means the socket is open and you’re able to receive messages from Ditto.
But first, you should let Ditto know in what kind of messages you’re interested.
This interest differs for both of the example applications:&lt;/p&gt;

&lt;p&gt;The thermostat app only needs to know every humidity and temperature report so you can define a filter for change events on twins having those properties:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START-SEND-EVENTS?filter=or(exists(features/environmentSensor/properties/temperature),exists(features/environmentSensor/properties/humidity))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Paste it into the &lt;em&gt;Message&lt;/em&gt; input and use the &lt;em&gt;Send&lt;/em&gt; button to post it. Ditto should acknowledge with a &lt;code class=&quot;highlighter-rouge&quot;&gt;START-SEND-EVENTS:ACK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s it for our thermostat app, let’s proceed to the fire alarm.
Open https://websocket.org/echo.html again in a separate tab and repeat the connection process.
But instead of consuming all temperature and humidity reports, we only want to be notified when a specific temperature threshold is exceeded.
90°C seems to be a solid value for this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;START-SEND-EVENTS?filter=gt(features/environmentSensor/properties/temperature,90)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After receiving Ditto’s acknowledgment, you’re done with the configuration.&lt;/p&gt;

&lt;h3 id=&quot;report-mocked-sensor-values-to-ditto&quot;&gt;Report mocked sensor values to Ditto&lt;/h3&gt;

&lt;p&gt;Use Ditto’s HTTP API to send mocked data on behalf of our sensors. First report a new humidity value for the humidity sensor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'55'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3AHumiditySensor/features/environmentSensor/properties/humidity'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now check both websocket.org tabs. The thermostat tab should have received an event with the reported value while nothing happened in the alarm tab.&lt;/p&gt;

&lt;p&gt;Continue with some temperature data from another sensor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'23'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureAndHumiditySensor/features/environmentSensor/properties/temperature'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The value change should be reported to the thermostat, but still no events for the alarm tab.&lt;/p&gt;

&lt;p&gt;Finally it’s time to start a fire. Report a very high temperature for the third sensor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'120'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureSensor/features/environmentSensor/properties/temperature'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now both applications should have received the reported data, and the fire alarm can use this event to (virtually) trigger its bell.&lt;/p&gt;

&lt;p&gt;But what about the teapot? Let him declare his identity by setting a personal message:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ditto:ditto'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--header&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'{
       &quot;properties&quot;: {
         &quot;message&quot;: &quot;I'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'m a teapot&quot;
       }
     }'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATeapot/features/status'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, no one cares and this no one is notified about that change.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
We do hope that &lt;strong&gt;you&lt;/strong&gt; care about this feature, we think it’s really awesome.
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;

</description>
            <pubDate>Fri, 21 Sep 2018 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2018-09-21-selective-push-notifications.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-09-21-selective-push-notifications.html</guid>
            
            <category>blog</category>
            
            <category>connectivity</category>
            
            <category>rql</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.8.0-M1</title>
            <description>&lt;p&gt;Even during the summer break the Ditto team worked hard in order to provide the next milestone release. Here it is: 
Milestone 0.8.0-M1.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;release_notes_080-M1.html&quot;&gt;0.8.0-M1 release notes&lt;/a&gt; for what changed in detail and why
there was a version bump from 0.3.0-M2 to 0.8.0-M1.&lt;/p&gt;

&lt;p&gt;The main changes and new features are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;security enhancement by making some of Ditto’s headers not settable from the outside&lt;/li&gt;
  &lt;li&gt;report application metrics to Prometheus&lt;/li&gt;
  &lt;li&gt;automatically form a cluster when running in Kubernetes&lt;/li&gt;
  &lt;li&gt;improvement of Ditto’s &lt;code class=&quot;highlighter-rouge&quot;&gt;things-service&lt;/code&gt; memory consumption&lt;/li&gt;
  &lt;li&gt;stabilization of the connectivity to AMQP 1.0 and 0.9.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Tue, 14 Aug 2018 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2018-08-14-milestone-announcement-080-M1.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-08-14-milestone-announcement-080-M1.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.3.0-M2</title>
            <description>&lt;p&gt;Today we, the Eclipse Ditto team, are happy to announce our next milestone 0.3.0-M2.&lt;/p&gt;

&lt;p&gt;The main changes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improvement of Ditto’s cluster performance with many managed Things
    &lt;ul&gt;
      &lt;li&gt;a new Ditto service &lt;a href=&quot;architecture-services-concierge.html&quot;&gt;ditto-concierge&lt;/a&gt; was added for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;improved cluster bootstrapping based on DNS with the potential to easy plugin other mechanism (e.g. for Kubernetes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;release_notes_030-M2.html&quot;&gt;0.3.0-M2 release notes&lt;/a&gt; for a detailed description of what 
changed.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Fri, 15 Jun 2018 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2018-06-15-milestone-announcement-030-M2.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-06-15-milestone-announcement-030-M2.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
    </channel>
</rss>
