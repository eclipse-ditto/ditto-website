<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title></title>
        <description>Eclipse Ditto Blog</description>
        <link>https://www.eclipse.org/ditto/</link>
        <atom:link href="https://www.eclipse.org/ditto/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Wed, 25 Apr 2018 13:03:51 -0400</pubDate>
        <lastBuildDate>Wed, 25 Apr 2018 13:03:51 -0400</lastBuildDate>
        <generator>Jekyll v3.6.2</generator>
        
        <item>
            <title>Ditto's connectivity capabilities are pimped up</title>
            <description>&lt;p&gt;It has been quite lately on our website and on GitHub as the Ditto team currently prepares its new &lt;code class=&quot;highlighter-rouge&quot;&gt;connectivity&lt;/code&gt; 
microservice. Until now Ditto’s &lt;code class=&quot;highlighter-rouge&quot;&gt;amqp-bridge&lt;/code&gt; service could connect to AMQP1.0 endpoints 
(e.g. &lt;a href=&quot;https://www.eclipse.org/hono/&quot;&gt;Eclipse Hono&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;That worked quite well, but still had some issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;failover/reconnection was not always done properly&lt;/li&gt;
  &lt;li&gt;the current connection state could not yet be retrieved&lt;/li&gt;
  &lt;li&gt;AMQP 1.0 is a great protocol including &lt;a href=&quot;https://www.reactivemanifesto.org&quot;&gt;reactive principles&lt;/a&gt; but it still is not very “mainstream”&lt;/li&gt;
  &lt;li&gt;the AMQP 1.0 messages consumed by Ditto already had to be in &lt;a href=&quot;protocol-overview.html&quot;&gt;Ditto Protocol&lt;/a&gt;, otherwise Ditto
could not understand them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our current implementation focus lies on two GitHub issues resolving those problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/ditto/issues/129&quot;&gt;Enhance existing AMQP-bridge with AMQP 0.9.1 connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/ditto/issues/130&quot;&gt;Support mapping arbitrary message payloads in AMQP-bridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;changes-and-enhancements&quot;&gt;Changes and Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;renaming&quot;&gt;Renaming&lt;/h3&gt;

&lt;p&gt;With the new responsibilities of the former amqp-bridge we have renamed the &lt;code class=&quot;highlighter-rouge&quot;&gt;amqp-bridge-service&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;connectivity-service&lt;/code&gt;. &lt;br /&gt;
The Docker image and the Maven artifacts are affected by this change.&lt;/p&gt;

&lt;h3 id=&quot;enhanced-connectivity&quot;&gt;Enhanced connectivity&lt;/h3&gt;

&lt;p&gt;The new &lt;a href=&quot;architecture-services-connectivity.html&quot;&gt;connectivity&lt;/a&gt; microservice can now manage and handle both AMQP 1.0 and 
AMQP 0.9.1 connections at the same time. &lt;br /&gt;
That means that Ditto from now on supports connecting to running AMQP 1.0 endpoints or to AMQP 0.9.1 brokers (e.g. RabbitMQ).
The architecture of the &lt;code class=&quot;highlighter-rouge&quot;&gt;connectivity&lt;/code&gt; microservice is designed to also support connecting via other protocols in the future.&lt;/p&gt;

&lt;p&gt;Need to connect to a Kafka in order to process digital twin &lt;a href=&quot;basic-signals-command.html&quot;&gt;commands&lt;/a&gt; from there or publish 
&lt;a href=&quot;basic-changenotifications.html&quot;&gt;change notifications&lt;/a&gt;? &lt;br /&gt;
Or want to send all state changes happening to twins to a time series database?&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;connectivity&lt;/code&gt; service is the new place to integrate your managed digital twins with other systems.&lt;/p&gt;

&lt;h3 id=&quot;json-format-of-connections&quot;&gt;JSON format of connections&lt;/h3&gt;

&lt;p&gt;As Ditto now supports more than AMQP 1.0, we had to adjust the JSON format for creating new connections. 
The new one is documented here: &lt;a href=&quot;connectivity-manage-connections.html&quot;&gt;Manage connections in connectivity&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;payload-mapping-of-external-messages&quot;&gt;Payload mapping of external messages&lt;/h3&gt;

&lt;p&gt;Eclipse Ditto is about providing access to IoT devices via the &lt;a href=&quot;intro-digitaltwins.html&quot;&gt;digital twin&lt;/a&gt; pattern. In order to
provide structured APIs for different heterogeneous devices Ditto defines a lightweight JSON based &lt;a href=&quot;basic-overview.html&quot;&gt;model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Devices in the IoT, may they be brownfield devices or newly produced devices, will probably not send their data to the
cloud in the structure and &lt;a href=&quot;protocol-overview.html&quot;&gt;protocol&lt;/a&gt; Ditto requires. They should not need to be aware of something
like Ditto running in the cloud mirroring them as digital twins.&lt;/p&gt;

&lt;p&gt;That’s why we added a JavaScript based payload mapping to the &lt;code class=&quot;highlighter-rouge&quot;&gt;connectivity&lt;/code&gt; service which is responsible for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;transforming text- or byte-payload from messages consumed via a &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; of a created connection to 
&lt;a href=&quot;protocol-overview.html&quot;&gt;Ditto Protocol&lt;/a&gt; &lt;a href=&quot;basic-signals-command.html&quot;&gt;commands&lt;/a&gt; and &lt;a href=&quot;basic-messages.html&quot;&gt;messages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;transforming back &lt;a href=&quot;basic-signals-commandresponse.html&quot;&gt;responses&lt;/a&gt; issued by commands and &lt;a href=&quot;basic-signals-event.html&quot;&gt;events&lt;/a&gt;
from Ditto Protocol to some text- or byte-payload before sending the message back via the configured &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;incoming&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;outgoing&lt;/code&gt; scripts must be configured when creating a new connection 
&lt;a href=&quot;connectivity-manage-connections.html&quot;&gt;via DevOps commands&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;Please find more information and examples at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;connectivity-overview.html&quot;&gt;Connectivity overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;connectivity-mapping.html&quot;&gt;Payload mapping in connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Wed, 25 Apr 2018 00:00:00 -0400</pubDate>
            <link>https://www.eclipse.org/ditto/2018-04-25-connectivity-service.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-04-25-connectivity-service.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Introducing Feature Definition</title>
            <description>&lt;p&gt;Brace yourselves, &lt;a href=&quot;https://eclipse.org/vorto&quot;&gt;Eclipse Vorto&lt;/a&gt; is going to be integrated with Ditto.&lt;/p&gt;

&lt;h2 id=&quot;rationale&quot;&gt;Rationale&lt;/h2&gt;
&lt;p&gt;By now you most probably represented your devices as &lt;em&gt;things&lt;/em&gt; with &lt;em&gt;features&lt;/em&gt;. 
This is indeed the proper way to do it.
This approach is flexible and easy so far.&lt;/p&gt;

&lt;p&gt;But wouldn’t it be nice to have the possibility of providing an explicit schema for the digital twins of your devices?&lt;/p&gt;

&lt;p&gt;This is where Eclipse Vorto enters the game.
Vorto enables you to define &lt;em&gt;information models&lt;/em&gt; and &lt;em&gt;function blocks&lt;/em&gt; which would be mapped to &lt;em&gt;things&lt;/em&gt; and &lt;em&gt;features&lt;/em&gt; 
in Ditto.&lt;/p&gt;

&lt;p&gt;To make a feature aware of a schema we have extended feature by a &lt;em&gt;definition&lt;/em&gt;.
A feature definition is a means of describing the type of a feature, thus enabling the validation the integrity of 
a feature’s properties.&lt;/p&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/pages/basic/ditto-thing-feature-definition-model.png&quot; alt=&quot;Feature Definition Model&quot; style=&quot;max-width: 250px&quot; /&gt;&lt;figcaption&gt;One Thing can have many features. A feature may conform to a *definition*&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;Technically, a definition is an array of identifier strings each of which having the form
 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;namespace&amp;gt;:&amp;lt;name&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A fully-fledged JSON representation of a feature with a definition is shown below:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lamp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;definition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;com.mycompany.fb:Lamp:1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configuration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;34.052235&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;-118.243683&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;on&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;red&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;green&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For diving deeper into feature definitions, please have a look at &lt;a href=&quot;basic-feature.html#feature-definition&quot;&gt;Basic concept - Feature Definition&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;validation&quot;&gt;Validation&lt;/h2&gt;
&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;&lt;i class=&quot;fa fa-exclamation-circle&quot;&gt;&lt;/i&gt; &lt;b&gt;Warning:&lt;/b&gt; Yet Ditto does not use definition to validate features by itself.&lt;/div&gt;

&lt;p&gt;However, nothing can stop you from enforcing types by yourself:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use the &lt;a href=&quot;http://vorto.eclipse.org/#/generators&quot;&gt;Ditto generator&lt;/a&gt; to generate JSON schema files from your Vorto
model(s).&lt;/li&gt;
  &lt;li&gt;Identify the schema files to be used by the Feature definition identifiers.&lt;/li&gt;
  &lt;li&gt;Validate the JSON representation of your feature using the JSON schema before sending it over the wire.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;Please find more information and an example at &lt;a href=&quot;basic-feature.html#feature-definition&quot;&gt;Basic concept - Feature Definition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Thu, 08 Feb 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-02-08-feature-definition.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-02-08-feature-definition.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.2.0-M1</title>
            <description>&lt;p&gt;The Ditto team is proud to announce the next milestone release.&lt;/p&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;release_notes_020-M1.html&quot;&gt;0.2.0-M1 release notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main changes are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;being able to &lt;a href=&quot;httpapi-search.html#query-parameters&quot;&gt;search in namespaces&lt;/a&gt; which can speed up search queries when applied
to a large population of Digital Twins&lt;/li&gt;
  &lt;li&gt;the enhancement of our &lt;a href=&quot;basic-feature.html&quot;&gt;Feature entity&lt;/a&gt; by &lt;a href=&quot;basic-feature.html#feature-definition&quot;&gt;Definitions&lt;/a&gt;
which lays the foundation for using Features in a typesafe way (later by enforcing the schema with the help of an
&lt;a href=&quot;https://github.com/eclipse/vorto/tree/development/generators/org.eclipse.vorto.codegen.ditto&quot;&gt;Eclipse Vorto generator&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtual-iot-meetup&quot;&gt;Virtual IoT Meetup&lt;/h2&gt;

&lt;p&gt;Today at 8am PT / 11am ET / 5pm CET Eclipse IoT will host a &lt;a href=&quot;https://www.meetup.com/Virtual-IoT/events/247048104/&quot;&gt;Virtual IoT meetup&lt;/a&gt;
in which we will show Eclipse Ditto’s features from a technical perspective.&lt;/p&gt;

&lt;p&gt;The video will be streamed on YouTube and will be available afterwards here: &lt;a href=&quot;https://www.youtube.com/watch?v=NpC4ROGqwKc&quot;&gt;youtube.com/watch?v=NpC4ROGqwKc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you there ;-)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Wed, 07 Feb 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-02-07-milestone-announcement-020-M1.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-02-07-milestone-announcement-020-M1.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Example demonstrating REST and WebSocket API</title>
            <description>&lt;p&gt;There’s a new example showing how to combine the REST and WebSocket API
over at the &lt;a href=&quot;https://github.com/eclipse/ditto-examples/tree/master/rest-to-websocket&quot;&gt;Eclipse Ditto examples repository&lt;/a&gt;.
Right from the project’s description:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This example shows how to leverage the powers of combining the REST and
 WebSocket Messages API of &lt;a href=&quot;https://eclipse.org/ditto/&quot;&gt;Eclipse Ditto&lt;/a&gt;.
 It demonstrates how to send direct Messages to a &lt;em&gt;live&lt;/em&gt; Thing, as well as
 updating the &lt;em&gt;twin&lt;/em&gt; representation of a Thing inside Ditto.
&lt;br /&gt; 
&lt;br /&gt; 
 The Thing in this case is a smart coffee machine (“SmartCoffee”) that has
 some basic functionality. It accepts Messages that allow to start or stop
 the heating of the water tank. Moreover you can request the coffee
 machine to brew coffee, so you don’t have to wait for your dose of caffeine.&lt;br /&gt;
 But before starting to brew a coffee, SmartCoffee will send a captcha
 that has to be solved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;https://raw.githubusercontent.com/eclipse/ditto-examples/master/rest-to-websocket/docs/images/make-coffee.gif&quot; alt=&quot;Eclipse Ditto REST to WebSocket example gif&quot; style=&quot;max-width: 800px&quot; /&gt;&lt;figcaption&gt;Source: https://github.com/eclipse/ditto-examples&lt;/figcaption&gt;&lt;/figure&gt;

&lt;p&gt;If you have any wishes, improvements, are missing something
or just want to get in touch with us, you can use one of
our &lt;a href=&quot;https://eclipse.org/ditto/feedback.html&quot;&gt;feedback channels&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Mon, 15 Jan 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-01-15-example-demonstrating-rest-to-websocket.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-01-15-example-demonstrating-rest-to-websocket.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.1.0-M3</title>
            <description>&lt;p&gt;We wish you all a happy new year&lt;br /&gt;
and an hope you are curious about our new Eclipse Ditto milestone.&lt;/p&gt;

&lt;h2 id=&quot;milestone-3&quot;&gt;Milestone 3&lt;/h2&gt;

&lt;p&gt;Our new milestone, namely &lt;a href=&quot;release_notes_010-M3.html&quot;&gt;0.1.0-M3&lt;/a&gt;, adds an AMQP 1.0 bridge. The bridge enables to connect 
to a running instance of &lt;a href=&quot;https://eclipse.org/hono/&quot;&gt;Eclipse Hono&lt;/a&gt;. Ditto can consume telemetry and event messages from Hono&lt;br /&gt;
and interpret those, given that these are compatible to our &lt;a href=&quot;protocol-overview.html&quot;&gt;Ditto Protocol&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find more information about the milestone in the &lt;a href=&quot;release_notes_010-M3.html&quot;&gt;0.1.0-M3 release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;sandbox&quot;&gt;Sandbox&lt;/h2&gt;

&lt;p&gt;Together with this milestone release we have set up a sandbox at &lt;a href=&quot;https://ditto.eclipse.org&quot;&gt;https://ditto.eclipse.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There, everyone with a Google account can try out the HTTP API by using the interactive 
&lt;a href=&quot;https://ditto.eclipse.org/apidoc/&quot;&gt;HTTP API documentation&lt;/a&gt; (powered by &lt;a href=&quot;https://swagger.io&quot;&gt;Swagger&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Try it out and share your experience.&lt;/p&gt;

&lt;p&gt;The sandbox does not yet start the new Connectivity in order to connect to Hono; we will work on that soon.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Fri, 12 Jan 2018 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2018-01-12-milestone-announcement-010-M3.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2018-01-12-milestone-announcement-010-M3.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Announcing Ditto Milestone 0.1.0-M1</title>
            <description>&lt;p&gt;We finally managed to build our first milestone of Eclipse Ditto: &lt;a href=&quot;release_notes_010-M1.html&quot;&gt;0.1.0-M1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java artifacts were published to both the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally Docker images were pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can simply follow the instructions in &lt;a href=&quot;installation-running.html&quot;&gt;Running Ditto&lt;/a&gt; to try it out now.&lt;/p&gt;

&lt;p&gt;We also have found our logo which you can now see on the landing page.&lt;/p&gt;

&lt;figure&gt;&lt;img class=&quot;docimage&quot; src=&quot;images/ditto.svg&quot; alt=&quot;Ditto&quot; style=&quot;max-width: 500px&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Mon, 18 Dec 2017 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2017-12-18-milestone-announcement-010-M1.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2017-12-18-milestone-announcement-010-M1.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
        <item>
            <title>Welcome to the Eclipse Ditto project site</title>
            <description>&lt;p&gt;A warm welcome, dear visitor, to our new project site.&lt;/p&gt;

&lt;p&gt;The initial contribution of the Ditto codebase was one month ago and we did show the Digital twins a little on
EclipseCon Europe in Ludwigsburg.&lt;br /&gt;
Meanwhile we worked on setting up the project site and documentation which we have now finished from the technical side.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http-api-doc.html&quot;&gt;HTTP API Documentation&lt;/a&gt; is already complete and describes both of our API versions 1 and 2.&lt;/p&gt;

&lt;p&gt;Next we focus on releasing a first Milestone &lt;code class=&quot;highlighter-rouge&quot;&gt;0.1.0-M1&lt;/code&gt; including images on &lt;a href=&quot;https://hub.docker.com/u/eclipse/&quot;&gt;Docker Hub&lt;/a&gt;
so that you can try out Eclipse Ditto more easily without building it first.&lt;/p&gt;

&lt;p&gt;We are looking forward to any feedback you have via our &lt;a href=&quot;feedback.html&quot;&gt;Feedback channels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;
</description>
            <pubDate>Fri, 10 Nov 2017 00:00:00 -0500</pubDate>
            <link>https://www.eclipse.org/ditto/2017-11-10-welcome-to-ditto.html</link>
            <guid isPermaLink="true">https://www.eclipse.org/ditto/2017-11-10-welcome-to-ditto.html</guid>
            
            <category>blog</category>
            
            
        </item>
        
    </channel>
</rss>
